#define BOOST_TEST_MAIN

#include <stdio.h>
#include <vector>
#include <string>
#include <iostream>

#include <boost/test/unit_test.hpp>
#include <boost/mpl/list.hpp>
#include <boost/test/test_case_template.hpp>

#include "corebluron/nrnconf.h"
#include "corebluron/nrnoc/multicore.h"
#include "corebluron/nrnoc/nrnoc_decl.h"
#include "corebluron/nrnmpi/nrnmpi.h"
#include "corebluron/nrniv/nrniv_decl.h"
#include "corebluron/nrniv/output_spikes.h"

#include "tests/integration/ring/ring_ref_solution.h"

extern int main1(int argc, char** argv, char** env);

/// Declare an empty function if Neurodamus mechanisms are not used, otherwise register them in mechs/cfile/mod_func.c
#ifndef NEURODAMUS_MECHS
void modl_reg() {}
#endif

struct test0{
    //const static std::string parameter;
    static char *args[];
    static int argc;
};

struct test1{
    //const static std::string parameter;
    static char *args[];
    static int argc;
};

char *test0::args[] = {"--celsius=6.3", "-mpi"};
int test0::argc = 4;
char *test1::args[] = {"--celsius=6.3", "-mpi"};
int test1::argc = 4;

typedef boost::mpl::list<test0,test1> full_test_types;

BOOST_AUTO_TEST_CASE_TEMPLATE(generic_ring_validation, T, full_test_types){


    std::vector<std::pair<double, int> > res;
    char* env[256];

//    main1(boost::unit_test::framework::master_test_suite().argc, boost::unit_test::framework::master_test_suite().argv, &env[0]);

    
    char *args[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    std::string path(boost::unit_test::framework::master_test_suite().argv[1]);

    args[0] = boost::unit_test::framework::master_test_suite().argv[0];
//   path = path + "/ring";
    args[1] = (char *)path.c_str();
printf("Path name: %s\n", args[1]);
    args[2] = T::args[0];
    args[3] = T::args[1];
    main1(T::argc, args, &env[0]);
    validation(res);

    path = path.substr(10); // Cutting out the "--datpath=" part of the argument
    reference ref(path);
//printf("path is %s\n", path.c_str());
//printf("boost-checking results...\n");
    BOOST_CHECK_EQUAL(ref.size(), res.size());

    for(size_t i=0; i < res.size(); ++i)
        BOOST_CHECK_CLOSE(res[i].first, ref[i].first, 0.001 );

}


/*
BOOST_AUTO_TEST_CASE(ring_validation)
{
    std::vector<std::pair<double, int> > res;
    char* env[256];

    main1(boost::unit_test::framework::master_test_suite().argc, boost::unit_test::framework::master_test_suite().argv, &env[0]);
//    main1(argc, argv, &env[0]);
    validation(res);

    std::string path(boost::unit_test::framework::master_test_suite().argv[1]);
    path = path.substr(10); // Cutting out the "--datpath=" part of the argument
    reference ref(path);
//printf("path is %s\n", path.c_str());
//printf("boost-checking results...\n");
    BOOST_CHECK_EQUAL(ref.size(), res.size());

    for(size_t i=0; i < res.size(); ++i)
        BOOST_CHECK_CLOSE(res[i].first, ref[i].first, 0.001 );
}

void my_test(int argc, char** argv, std::string& path){
    std::vector<std::pair<double, int> > res;
    char* env[256];

 // main1(boost::unit_test::framework::master_test_suite().argc, boost::unit_test::framework::master_test_suite().argv, &env[0]);
printf("CAlling main...\n");
    main1(argc, argv, &env[0]);
printf("validating...\n");
    validation(res);

//    std::string path(boost::unit_test::framework::master_test_suite().argv[1]);
    path = path.substr(10); // Cutting out the "--datpath=" part of the argument
    reference ref(path);
printf("path is %s\n", path.c_str());
printf("boost-checking results...\n");
    BOOST_CHECK_EQUAL(ref.size(), res.size());

    for(size_t i=0; i < res.size(); ++i)
        BOOST_CHECK_CLOSE(res[i].first, ref[i].first, 0.001 );

}


BOOST_AUTO_TEST_CASE(ring_validation)
{
   std::string path(boost::unit_test::framework::master_test_suite().argv[1]);
   char *args[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
   char *pool_options[] = {"--celsius=6.3", "--celsius=34", "-mpi"};

   args[0] = boost::unit_test::framework::master_test_suite().argv[0];
//   path = path + "/ring";
   args[1] = (char *)path.c_str();
printf("Path name: %s\n", args[1]);
   args[2] = pool_options[0];
   args[3] = pool_options[2];
   my_test(4, args, path);   
   my_test(4, args, path);   
  
//   path = path + "/ring_IClamp"; 
//   args[1] = (char *)path.c_str();
//   my_test(4, args, path);   

}
*/

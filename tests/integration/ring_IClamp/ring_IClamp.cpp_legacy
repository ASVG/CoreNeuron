#define BOOST_TEST_MAIN

#include <stdio.h>
#include <vector>
#include <string>

#include <boost/test/unit_test.hpp>
#include <boost/test/test_case_template.hpp>

#include "corebluron/nrnconf.h"
#include "corebluron/nrnoc/multicore.h"
#include "corebluron/nrnoc/nrnoc_decl.h"
#include "corebluron/nrnmpi/nrnmpi.h"
#include "corebluron/nrniv/nrniv_decl.h"
#include "corebluron/nrniv/output_spikes.h"

#include "tests/integration/ring/ring_ref_solution.h"

extern int main1(int argc, char** argv, char** env);

BOOST_AUTO_TEST_CASE(ring_validation)
{
    std::vector<std::pair<double, int> > res;
    char* env[256];

    main1(boost::unit_test::framework::master_test_suite().argc, boost::unit_test::framework::master_test_suite().argv, &env[0]);
    validation(res);

    std::string path(boost::unit_test::framework::master_test_suite().argv[1]);
    path = path.substr(10); // Cutting out the "--datpath=" part of the argument
    reference ref(path);
    BOOST_CHECK_EQUAL(ref.size(), res.size());

    for(int i=0; i < res.size(); ++i)
        BOOST_CHECK_CLOSE(res[i].first, ref[i].first, 0.001 );
}

/// Declare an empty function if Neurodamus mechanisms are not used, otherwise register them in mechs/cfile/mod_func.c
#ifndef NEURODAMUS_MECHS
void modl_reg() {}
#endif


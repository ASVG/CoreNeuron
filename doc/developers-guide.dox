/**
@page Developers_Guide Developer's Guide
    -# @ref General
    -# @ref Directory_Overview
    -# @ref Building_and_Installing
        -# @ref Building
        -# @ref Additional_configuration
        -# @ref Custom_Build
        -# @ref Installing
    -# @ref Running
    -# @ref Testing_and_Validation
        -# @ref Basic_Testing
        -# @ref Results_Validation
        -# @ref Modify_Parameters
    -# @ref Known_Issues

    @htmlonly
    <hr>
    @endhtmlonly

    @section General General
        In this part of the documentation the developer-related issues are addressed.


    @section Directory_Overview Directory Overview
      The root corebluron directory has the following structure:

      -# <b><code>apps</code></b> - directory with generic main.cpp file.
      -# <b><code>corebluron</code></b> - source folder:
        -# <b><code>nrniv</code></b> - the source code of core simulator, .cpp files.
        -# <b><code>nrnmpi</code></b> - the MPI related source code of the simulator.
        -# <b><code>nrnoc</code></b> - the source code of core simulator, .c files.
        -# <b><code>mech</code></b> - the source code for mechanisms.
            - <b><code>cfile</code></b> - .c files for the corresponding mechanisms built from .mod files. Also, necessary .h files needed for generated .c files.
            - <b><code>modfile</code></b> - mod files of mechanisms.
        -# <b><code>utils</code></b> - different utilities, some of them are for temporary use to substitute some third-party library.
      -# <b><code>doc</code></b> - documentation.
      -# <b><code>tests</code></b> - tests using Boost environment:
        -# <b><code>integration</code></b> - integration tests for various simulations.
        -# <b><code>regression</code></b> - regression testing or unit testing.
        -# <b><code>validation</code></b> - validation tests which are run using the python scripts to verify the validity of the output.


@section Building_and_Installing Building and Installing

CoreBluron is using MPI for parallelization. Currently the following compilers/MPI libraries for production
simulations are used:
- Blue Gene/Q: XLC 12.1.0.7 (V1R2M1 drivers)
- x86_64: icc 13.1, mvapich 2.0

One can use other compilers and MPI library distributions. Make sure that appropriate modules are loaded and
CMake (minimum required version 2.8) is correctly setting appropriate compilers/libraries.


@subsection Building Building

In order to build the simulator follow the steps below:

1. Set the correct MPI compilers (wrappers) with the CC and CXX environment flags.
   Example: on a Blue Gene Q:
     export CC=mpixlc
     export CXX=mpixlcxx

2. To build the binaries and libraries use the CMake build system (from the top level folder of CoreBluron)
     mkdir build && cd build
     cmake ..
     make

Above steps will create binaries and libraries under build/bin and build/lib folders respectively.

For more complete guide lines on how to build the code with Neurodamus, please refer to the following link:
https://bbpteam.epfl.ch/project/spaces/display/BBPHPC/CoreBluron+with+Neurodamus


@subsection Additional_configuration Additional Configuration Flags

When configuring the build environment with CMake, one can modify the value of following variables,
which will result in different building outputs:
  - COREBLURON_MAIN: defines whether to build the executable. Default value: ON.
  - COREBLURON_TESTS: defines whether to build the tests. Default value: ON.
  - COREBLURON_NEURODAMUS_MECHS: defines whether to build a library with all the mechanisms from Neurodamus,
which are currently getting synced in the <code>corebluron/mech/cfile</code> folder. Default value: OFF.


@subsection Custom_Build Custom Build

One can specify C++/C compilation flags spcecific to the compiler and architecture with -DCMAKE_CXX_FLAGS
and -DCMAKE_C_FLAGS options to the CMake command:

For example, on a Blue Gene Q:
     cmake .. -DCMAKE_CXX_FLAGS="-O5 -qtune=qp -qarch=qp -q64 -qhot=simd -qsmp -qthreaded -qipa=level=2"
              -DCMAKE_C_FLAGS="-O5 -qtune=qp -qarch=qp -q64 -qhot=simd -qsmp -qthreaded -qipa=level=2"

Note that one should explicitly specify the compilation flags.

Building on x86 and BG-Q platform should work with the above instructions.
On other systems you might need to pass additional CMake otpions like MPI_C_COMPILER, MPI_C_INCLUDE_PATH etc.
For example, on Cray's Piz Diant system the following command line was used to build CoreBluron:

$ export CC=`which cc` export CXX=`which CC`
$ cmake -DMPI_C_INCLUDE_PATH=$PATH_TO_MPI_C_INCLUDE_PATH -DMPI_C_LIBRARIES=$PATH_TO_MPI_C_LIBRARIES -DMPI_CXX_INCLUDE_PATH=$PATH_TO_MPI_CXX_INCLUDE_PATH -DMPI_CXX_LIBRARIES=$PATH_TO_MPI_CXX_LIBRARIES -DMPI_C_COMPILER=$CC -DMPI_CXX_COMPILER=$CXX


@subsection Installing Installing

Follow the previous steps with below modifications:

1. To CMake command line, specify the installation destination:
     cmake .. -DCMAKE_INSTALL_PREFIX=$PATH_TO_INSTALL_FOLDER

2. After building the code, install it using
     make install

The installation folder will be $PATH_TO_INSTALL_FOLDER, and should contain:
     -# $PATH_TO_INSTALL_FOLDER/lib/libcorebluron.so.#.#.#
     -# $PATH_TO_INSTALL_FOLDER/lib/libcorebluron.so.#.##
     -# $PATH_TO_INSTALL_FOLDER/lib/libcorebluron.so
     -# $PATH_TO_INSTALL_FOLDER/bin/corebluron_exec

where # is the (sub) version number.


@section Running Running

Once the CoreBluron is built, one can run parallel simulator with any MPI launcher as:

1. Change to the directory containing simulation input test data (bbcore_mech.dat, files.dat, inputs.dat, *_1.dat, *_2.dat).

2. Set environmental variables by adding lib folder (in build/lib or $PATH_TO_INSTALL_FOLDER/lib) to the LD_LIBRARY_PATH :
     export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$PATH_TO_INSTALL_FOLDER/lib

3. And run simulator with any MPI launcher as:
     srun -n $NUM_MPIS $PATH_TO_COREBLURON_EXEC -mpi   (assuming slurm batch system)
     where $NUM_MPIS is number of MPI ranks and $PATH_TO_COREBLURON_EXEC is path of corebluron executable.


@section Testing_and_Validation Testing and Validation

@subsection Basic_Testing Basic Testing

  In order to run unit and integration tests, one shoud run <b><code>make test</code></b> after installing the code


@subsection Results_Validation Results Validation

When running the simulation with CoreBluron, each MPI rank writes spike information to out.$mpi_rank file. Those files
should be combined, sorted and renamed to "out.dat.ref" file to further be able to follow the validation steps.

To validate the results against the reference solution, make sure to use a default simulation time used to produce a reference
results. The validation process itself is described in the "tests/validation/README" file. Please note that only double precision numbers
have been used to prepare the validation test cases.


@subsection Modify_Parameters Modifying Test Input Parameters

  1. MODIFY SIMULATION RUNTIME <br>
One can increase/decrease the simulation time of tests by modifying "EndTime" value in the "input.dat" file provided in each test case
directory. The format of this file is: <br><br>
\# User parameters <br>
  StartTime     0.          => this number should not be modified <br>
  EndTime       100.        => only change this number if you want to reduce the time to solution of the total simulation (for testing only) <br>
  Dt            0.025       => this number should not be modified <br><br>


  2. MODIFY SPIKE BUFFER SIZE<br>
If the "EndTime" is significantly increased, the produced amount of spikes might not fit in the allocated buffer size. The buffer
size is defined under the "SpikeBuf" variable in the file "input.dat" as follows: <br><br>
\# Developer parameters <br>
  Celsius       34.         => this number should not be modified <br>
  Voltage       -65.        => this number should not be modified <br>
  MaxDelay      10.         => this number should not be modified <br>
  SpikeBuf      1000        => spike buffer size (double precision array of size SpikeBuf corresponding to the maximum number of spikes per MPI task) <br><br>
  Although parameters from this section of the file are advised to remain untouched, to avoid a segfault
("Assertion `spikevec_size < spikevec_buffer_size' failed.") with the increased "EndTime", one could increase the spike buffer size. <br><br>


  3. MODIFY USE CASE SIZE (Number of cells/neurons) <br>
It is possible to run tests with different number of MPI ranks. In every simulation input data directory one can find the file named
"files.dat". This file has following format (example): <br><br>
  32768      -> first line is the number of cell ids (or entries) in the file <br>
  250014     -> first cell id <br>
  491530     -> second cell id <br>
  .... <br>

  As shown above, first number is always the number of entries in the files and then there is a list of cell ids per line.
Once the simulation has been started, CoreBluron will distribute the cell ids in round robin fashion. (Remeber that each cell id belongs to
input file named cellid_1.dat and cellid_2.dat in the simulation input data directory).

  Note: Make sure that the number of MPI ranks is not greater than the number of cell ids in "files.dat". Also make sure that the number
of cell ids is not greater than the maximum number of files provided for each test case.

  For example, the first line in the file "files.dat", 32768, specifies the total number of cell ids and the limitation on maximum number
of MPI for the corresponding test case (one can run simulation with less number of MPI ranks as long as all input data
fits into the memory).

  To run the test on the smaller cluster, one have to modify "files.data" file accordingly. For example, if modifying first line in
"files.dat" to 100 will result in simulator reading only 100 cell ids data (and will distribute that among all MPI ranks).



@section Known_Issues Known Issues
     - Fix all the warnings.

*/
